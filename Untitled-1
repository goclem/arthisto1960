
#%% MODEL

# Model structure
def Unet(n_classes:int=1, input_size:tuple=(256, 256, 3)):
    # Input block
    inputs = keras.layers.Input(shape=input_size)
    # Convolutional block 1
    conv1 = keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(inputs)
    conv1 = keras.layers.BatchNormalization()(conv1)
    conv1 = keras.layers.Dropout(0.1)(conv1)
    conv1 = keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv1)
    conv1 = keras.layers.BatchNormalization()(conv1)
    pool1 = keras.layers.MaxPooling2D((2, 2))(conv1)
    # Convolutional block 2
    conv2 = keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(pool1)
    conv2 = keras.layers.Dropout(0.1)(conv2)
    conv2 = keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv2)
    pool2 = keras.layers.MaxPooling2D((2, 2))(conv2)
    # Convolutional block 3
    conv3 = keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(pool2)
    conv3 = keras.layers.Dropout(0.2)(conv3)
    conv3 = keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv3)
    pool3 = keras.layers.MaxPooling2D((2, 2))(conv3)
     # Convolutional block 4
    conv4 = keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(pool3)
    conv4 = keras.layers.Dropout(0.2)(conv4)
    conv4 = keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv4)
    pool4 = keras.layers.MaxPooling2D(pool_size=(2, 2))(conv4)
    # Convolutional block 5
    conv5 = keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(pool4)
    conv5 = keras.layers.Dropout(0.3)(conv5)
    conv5 = keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv5)
    # De-convolutional block 1
    deco6 = keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(conv5)
    deco6 = keras.layers.concatenate([deco6, conv4])
    conv6 = keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(deco6)
    conv6 = keras.layers.Dropout(0.2)(conv6)
    conv6 = keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv6)
    # De-convolutional block 2
    deco7 = keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(conv6)
    deco7 = keras.layers.concatenate([deco7, conv3])
    conv7 = keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(deco7)
    conv7 = keras.layers.Dropout(0.2)(conv7)
    conv7 = keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv7)
    # De-convolutional block 3
    deco8 = keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(conv7)
    deco8 = keras.layers.concatenate([deco8, conv2])
    conv8 = keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(deco8)
    conv8 = keras.layers.Dropout(0.1)(conv8)  # Original 0.1
    conv8 = keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv8)
    # De-convolutional block 4
    deco9 = keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(conv8)
    deco9 = keras.layers.concatenate([deco9, conv1], axis=3)
    conv9 = keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(deco9)
    conv9 = keras.layers.Dropout(0.1)(conv9)  # Original 0.1
    conv9 = keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(conv9)
    # Ouput block
    outputs = keras.layers.Conv2D(n_classes, kernel_size=(1, 1), activation='sigmoid', padding='valid')(conv9)
    # Model
    model  = keras.models.Model(inputs=inputs, outputs=outputs)
    return model

# Initialise model